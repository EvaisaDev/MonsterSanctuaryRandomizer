using BepInEx;
using HarmonyLib;
using System;
using BepInEx.Logging;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Reflection;
using UnityEngine;
using Random = UnityEngine.Random;

namespace MonsterSanctuaryRandomizer
{
    [BepInPlugin(ModGUID, ModName, ModVersion)]
    public class MonsterRandomizer : BaseUnityPlugin
    {
        public const string ModGUID = "evaisa.monsterrandomizer";
        public const string ModName = "Monster Randomizer";
        public const string ModVersion = "1.0.0";

        public static WorldData worldData;

        public static Dictionary<string, List<GameObject>> mapMonsters;
        public static Dictionary<string, List<GameObject>> mapMonstersChampion;

       // public Harmony harmony = null;

        void Awake()
        {
            mapMonsters = new Dictionary<string, List<GameObject>>();
            mapMonstersChampion = new Dictionary<string, List<GameObject>>();
            Harmony.CreateAndPatchAll(Assembly.GetExecutingAssembly());
            // Harmony.CreateAndPatchAll(typeof(MonsterRandomizer));
            UnityEngine.Debug.Log("Hello, world!");
        }

        /*
        void Start()
        {

            GameController.Instance.WorldData.Maps.ForEach(mapData =>
            {
                mapData.Encounters.ForEach(encounter => {
                    if (encounter.EncounterType == EEncounterType.Champion || encounter.EncounterType == EEncounterType.ChampionChallenge)
                    {
                        encounter.Monsters.ForEach(monster =>
                        {
                            //champion_monsters.Add(monster.gameObject);
                            //regular_monsters.Add(monster.gameObject);
                        });
                    }
                    else
                    {
                        encounter.Monsters.ForEach(monster =>
                        {
                            regular_monsters.Add(monster.gameObject);
                        });
                    }
                });
            });
        }
        */

        public ManualLogSource GetLogger()
        {
            return Logger;
        }


        /*
        [HarmonyPatch(typeof(WorldData), "GetMapDataBySceneName")]
        [HarmonyPrefix]
        public MapData GetMapDataBySceneName_routed(WorldData instance)
        {
            UnityEngine.Debug.Log("How the heck is this running?");
            foreach (MapData mapData in instance.Maps)
            {
                return mapData;
            }
            return null;
        }
        */
    }

    [HarmonyPatch(typeof(MonsterEncounter), nameof(MonsterEncounter.DetermineEnemy), MethodType.Normal)]
    public class enemySwitcheroo
    {
        [HarmonyPostfix]
        static void PostFix(MonsterEncounter __instance, ref MonsterEncounter.EncounterConfig __result)
        {

            Random.InitState(PlayerController.Instance.PlayerName.GetHashCode()+GameController.Instance.CurrentSceneName.GetHashCode());
            var regular_monsters = new List<GameObject>();
            var champion_monsters = new List<GameObject>();

            GameController.Instance.WorldData.Maps.ForEach(mapData =>
            {
                mapData.Encounters.ForEach(encounter => {
                    if (encounter.EncounterType == EEncounterType.Champion || encounter.EncounterType == EEncounterType.ChampionChallenge) {
                        encounter.Monsters.ForEach(monster =>
                        {
                           champion_monsters.Add(monster.gameObject);
                           regular_monsters.Add(monster.gameObject);
                        });
                    }
                    else
                    {
                        encounter.Monsters.ForEach(monster =>
                        {
                            regular_monsters.Add(monster.gameObject);
                        });
                    }
                });
            });


            var monster_count = __result.Monster.Length;

            var is_champion = __instance.IsChampion;



            for( int i = 0; i < monster_count; i++)
            {
                // Debug.Log("Monster count = "+ allowed_monsters);
                if (is_champion)
                {
                    __result.Monster[i] = champion_monsters[Random.Range(0, champion_monsters.Count)];
                }
                else
                {
                    __result.Monster[i] = regular_monsters[Random.Range(0, regular_monsters.Count)];
                }
            
            }

        }
    }
}
